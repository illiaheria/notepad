{"ast":null,"code":"const HTTP_ACTION = 'HTTP_ACTION';\nexport const httpMiddleware = store => next => action => {\n  if (action[HTTP_ACTION]) {\n    const actionInfo = action[HTTP_ACTION];\n    const fetchOption = {\n      method: actionInfo.verb,\n      headers: actionInfo.headers,\n      body: actionInfo.payload\n    };\n    next({\n      type: actionInfo.type + '_REQUESTED'\n    });\n    fetch(actionInfo.endpoint, fetchOption).then(res => res.json()).then(data => next({\n      type: actionInfo.type + '_RECEIVED',\n      payload: data\n    })).catch(error => next({\n      type: actionInfo.type + '_FAILED',\n      payload: error\n    }));\n  } else {\n    return next(action);\n  }\n};","map":{"version":3,"sources":["/home/user/notepad/src/utils/actionMiddleware.ts"],"names":["HTTP_ACTION","httpMiddleware","store","next","action","actionInfo","fetchOption","method","verb","headers","body","payload","type","fetch","endpoint","then","res","json","data","catch","error"],"mappings":"AAAA,MAAMA,WAAW,GAAG,aAApB;AAEA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAiBC,IAAD,IAAgBC,MAAD,IAAiB;AAC5E,MAAIA,MAAM,CAACJ,WAAD,CAAV,EAAyB;AACvB,UAAMK,UAAU,GAAGD,MAAM,CAACJ,WAAD,CAAzB;AACA,UAAMM,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAEF,UAAU,CAACG,IADD;AAElBC,MAAAA,OAAO,EAAEJ,UAAU,CAACI,OAFF;AAGlBC,MAAAA,IAAI,EAAEL,UAAU,CAACM;AAHC,KAApB;AAKAR,IAAAA,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAEP,UAAU,CAACO,IAAX,GAAkB;AADrB,KAAD,CAAJ;AAIAC,IAAAA,KAAK,CAACR,UAAU,CAACS,QAAZ,EAAsBR,WAAtB,CAAL,CACGS,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IACJf,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAEP,UAAU,CAACO,IAAX,GAAkB,WADrB;AAEHD,MAAAA,OAAO,EAAEO;AAFN,KAAD,CAHR,EAQGC,KARH,CAQUC,KAAD,IACLjB,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAEP,UAAU,CAACO,IAAX,GAAkB,SADrB;AAEHD,MAAAA,OAAO,EAAES;AAFN,KAAD,CATR;AAcD,GAzBD,MAyBO;AACL,WAAOjB,IAAI,CAACC,MAAD,CAAX;AACD;AACF,CA7BM","sourcesContent":["const HTTP_ACTION = 'HTTP_ACTION';\n\nexport const httpMiddleware = (store: any) => (next: any) => (action: any) => {\n  if (action[HTTP_ACTION]) {\n    const actionInfo = action[HTTP_ACTION];\n    const fetchOption = {\n      method: actionInfo.verb,\n      headers: actionInfo.headers,\n      body: actionInfo.payload,\n    };\n    next({\n      type: actionInfo.type + '_REQUESTED',\n    });\n\n    fetch(actionInfo.endpoint, fetchOption)\n      .then((res) => res.json())\n      .then((data) =>\n        next({\n          type: actionInfo.type + '_RECEIVED',\n          payload: data,\n        }),\n      )\n      .catch((error) =>\n        next({\n          type: actionInfo.type + '_FAILED',\n          payload: error,\n        }),\n      );\n  } else {\n    return next(action);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}