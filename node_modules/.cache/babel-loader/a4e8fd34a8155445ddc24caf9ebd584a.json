{"ast":null,"code":"export const httpMiddleware = store => next => action => {\n  if (action.endpoint) {\n    const fetchOption = {\n      method: action.verb,\n      headers: action.headers,\n      body: action.payload\n    };\n    next({\n      type: action.type + '_REQUESTED'\n    });\n\n    if (action.endpoint) {\n      fetch(action.endpoint, fetchOption).then(res => res.json()).then(data => next({\n        type: action.type + '_RECEIVED',\n        payload: data\n      })).catch(error => next({\n        type: action.type + '_FAILED',\n        payload: error.message\n      }));\n    }\n  } else {\n    return next(action);\n  }\n};","map":{"version":3,"sources":["/home/user/notepad/src/utils/actionMiddleware.ts"],"names":["httpMiddleware","store","next","action","endpoint","fetchOption","method","verb","headers","body","payload","type","fetch","then","res","json","data","catch","error","message"],"mappings":"AAGA,OAAO,MAAMA,cAAc,GAAIC,KAAD,IAAiBC,IAAD,IAC5CC,MADgE,IAE7D;AACH,MAAIA,MAAM,CAACC,QAAX,EAAqB;AACnB,UAAMC,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAEH,MAAM,CAACI,IADG;AAElBC,MAAAA,OAAO,EAAEL,MAAM,CAACK,OAFE;AAGlBC,MAAAA,IAAI,EAAEN,MAAM,CAACO;AAHK,KAApB;AAKAR,IAAAA,IAAI,CAAC;AACHS,MAAAA,IAAI,EAAER,MAAM,CAACQ,IAAP,GAAc;AADjB,KAAD,CAAJ;;AAIA,QAAIR,MAAM,CAACC,QAAX,EAAqB;AACnBQ,MAAAA,KAAK,CAACT,MAAM,CAACC,QAAR,EAAkBC,WAAlB,CAAL,CACGQ,IADH,CACSC,GAAD,IAAcA,GAAG,CAACC,IAAJ,EADtB,EAEGF,IAFH,CAESG,IAAD,IACJd,IAAI,CAAC;AACHS,QAAAA,IAAI,EAAER,MAAM,CAACQ,IAAP,GAAc,WADjB;AAEHD,QAAAA,OAAO,EAAEM;AAFN,OAAD,CAHR,EAQGC,KARH,CAQUC,KAAD,IACLhB,IAAI,CAAC;AACHS,QAAAA,IAAI,EAAER,MAAM,CAACQ,IAAP,GAAc,SADjB;AAEHD,QAAAA,OAAO,EAAEQ,KAAK,CAACC;AAFZ,OAAD,CATR;AAcD;AACF,GA1BD,MA0BO;AACL,WAAOjB,IAAI,CAACC,MAAD,CAAX;AACD;AACF,CAhCM","sourcesContent":["import { Dispatch } from 'redux';\nimport { IAction } from '../models/actionModel';\n\nexport const httpMiddleware = (store: any) => (next: Dispatch) => (\n  action: IAction,\n) => {\n  if (action.endpoint) {\n    const fetchOption = {\n      method: action.verb,\n      headers: action.headers,\n      body: action.payload,\n    };\n    next({\n      type: action.type + '_REQUESTED',\n    });\n\n    if (action.endpoint) {\n      fetch(action.endpoint, fetchOption)\n        .then((res: any) => res.json())\n        .then((data: any) =>\n          next({\n            type: action.type + '_RECEIVED',\n            payload: data,\n          }),\n        )\n        .catch((error: any) =>\n          next({\n            type: action.type + '_FAILED',\n            payload: error.message,\n          }),\n        );\n    }\n  } else {\n    return next(action);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}