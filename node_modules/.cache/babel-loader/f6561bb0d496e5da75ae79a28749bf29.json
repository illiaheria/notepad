{"ast":null,"code":"const HTTP_ACTION = 'HTTP_ACTION';\nexport const httpMiddleware = store => next => action => {\n  if (action) {\n    const fetchOption = {\n      method: action.verb,\n      headers: action.headers,\n      body: action.payload\n    };\n    next({\n      type: action.type + '_REQUESTED'\n    });\n    fetch(action.endpoint, fetchOption).then(res => res.json()).then(data => next({\n      type: action.type + '_RECEIVED',\n      payload: data\n    })).catch(error => next({\n      type: action.type + '_FAILED',\n      payload: error.message\n    }));\n  } else {\n    return next(action);\n  }\n};","map":{"version":3,"sources":["/home/user/notepad/src/utils/actionMiddleware.ts"],"names":["HTTP_ACTION","httpMiddleware","store","next","action","fetchOption","method","verb","headers","body","payload","type","fetch","endpoint","then","res","json","data","catch","error","message"],"mappings":"AAIA,MAAMA,WAAW,GAAG,aAApB;AAEA,OAAO,MAAMC,cAAc,GAAIC,KAAD,IAAiBC,IAAD,IAC5CC,MADgE,IAE7D;AACH,MAAIA,MAAJ,EAAY;AACV,UAAMC,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAEF,MAAM,CAACG,IADG;AAElBC,MAAAA,OAAO,EAAEJ,MAAM,CAACI,OAFE;AAGlBC,MAAAA,IAAI,EAAEL,MAAM,CAACM;AAHK,KAApB;AAKAP,IAAAA,IAAI,CAAC;AACHQ,MAAAA,IAAI,EAAEP,MAAM,CAACO,IAAP,GAAc;AADjB,KAAD,CAAJ;AAIAC,IAAAA,KAAK,CAACR,MAAM,CAACS,QAAR,EAAkBR,WAAlB,CAAL,CACGS,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESG,IAAD,IACJd,IAAI,CAAC;AACHQ,MAAAA,IAAI,EAAEP,MAAM,CAACO,IAAP,GAAc,WADjB;AAEHD,MAAAA,OAAO,EAAEO;AAFN,KAAD,CAHR,EAQGC,KARH,CAQUC,KAAD,IACLhB,IAAI,CAAC;AACHQ,MAAAA,IAAI,EAAEP,MAAM,CAACO,IAAP,GAAc,SADjB;AAEHD,MAAAA,OAAO,EAAES,KAAK,CAACC;AAFZ,KAAD,CATR;AAcD,GAxBD,MAwBO;AACL,WAAOjB,IAAI,CAACC,MAAD,CAAX;AACD;AACF,CA9BM","sourcesContent":["import { IReturn } from './actionCreator';\nimport { Dispatch } from 'redux';\nimport { IAction } from '../models/actionModel';\n\nconst HTTP_ACTION = 'HTTP_ACTION';\n\nexport const httpMiddleware = (store: any) => (next: Dispatch) => (\n  action: any,\n) => {\n  if (action) {\n    const fetchOption = {\n      method: action.verb,\n      headers: action.headers,\n      body: action.payload,\n    };\n    next({\n      type: action.type + '_REQUESTED',\n    });\n\n    fetch(action.endpoint, fetchOption)\n      .then((res) => res.json())\n      .then((data) =>\n        next({\n          type: action.type + '_RECEIVED',\n          payload: data,\n        }),\n      )\n      .catch((error) =>\n        next({\n          type: action.type + '_FAILED',\n          payload: error.message,\n        }),\n      );\n  } else {\n    return next(action);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}